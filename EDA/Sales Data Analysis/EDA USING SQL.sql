create database EDA;
USE EDA;
--- Diamention And Measure 
-- 1. Diamention :-- First check the Columns is Numeric of Categorical 
-- if the column is categoricat them it is Diamention 
 

-- 2. If  the column is Numeric then check if it make sence to aggregation 
-- if it is then it os measure else it is diamention

-- Database Exploration

-- EXPLORE ALL TABLE IN DATABASE
 SELECT * FROM INFORMATION_SCHEMA.TABLES

-- EXPLORE ALL COLUMNS IN DATABASE 
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME LIKE 'dim_customers';


-- Diamention Exploration 
-- Identify the unique value (or categories) in each diamentions
	SELECT DISTINCT country FROM dim_customers;

-- Explore all categories 'The Major Explorers'
	SELECT DISTINCT category FROM [dbo].[gold.dim_products];
    
	SELECT DISTINCT category, subcategory,product_name FROM [dbo].[gold.dim_products]
	ORDER BY 1,2,3 ;

-- DATE EXPLORATION (MOST IMPORTANT STEP TO ANALYZE THE DATA )
-- SEE THE BOUNDRIES OF THE DATE / EARLIEAST AND LATEST DATE 
--- FOR birthdate : bithdate range = 1986-06-25 --> 2025-10-06
   SELECT MIN(create_date) FROM dim_customers;
   SELECT MAX(birthdate) FROM dim_customers;

-- FOR create_date : date range =  2026-01-27 ---> 2025-10-06
   SELECT MIN(create_date) FROM dim_customers;
   SELECT MAX(create_date) FROM dim_customers;

--- FOR ORDER_DATE IN THE SALES TABLE 
-- 2010-12-29 ---> 2014-01-28
    SELECT MIN(order_date) FROM dbo.[gold.fact_sales];
	SELECT MAX(order_date)  FROM [gold.fact_sales];

	SELECT 
	     MIN(order_date) first_order_date ,
		 MAX(order_date) last_order_date ,
		 DATEDIFF(YEAR,MIN(order_date),MAX(order_date)) AS date_range_year,
		 DATEDIFF(MONTH,MIN(order_date),MAX(order_date)) AS date_range_month,
		 DATEDIFF(DAY,MIN(order_date),MAX(order_date)) AS date_range_day
	FROM [gold.fact_sales];

-- FIND THE YOUNGEST AND OLDEST CUSTOMERS 
SELECT 
     MIN(birthdate) oldest_customers_dob,
	 MAX(birthdate) youngest_customers_dob
FROM dim_customers;

-- SEE THE AGE OF THE OLDEST AND YOUNGEST CUSTOMERS 
SELECT 
	MIN(birthdate) AS old_customer,
	MAX(birthdate) AS young_customer,
	DATEDIFF(YEAR,MIN(birthdate),GETDATE()) AS old_customer_age,
	DATEDIFF(YEAR,MAX(birthdate),GETDATE()) AS young_customer_age
FROM dim_customers

-- MEASURE EXPLORATION
-- FIND THE TOTAL SALES 
 SELECT 
	CONCAT(SUM(sales_amount)/100000, 'M') total_revenue 
 FROM fact_sales;

-- FIND HOW MANY ITEMS ARE SOLD?
   SELECT SUM(quantity) AS total_item_sold 
   FROM fact_sales ;

-- FIND THE TOTAL NUMBER OF ORDERS 
  SELECT
       COUNT(order_number) AS total_orders  
  FROM fact_sales;

  SELECT COUNT(DISTINCT order_number) FROM fact_sales;
 
-- FIND THE AVERAGE SELLING PRICE 
   SELECT 
	  AVG(price) AS average_price 
   FROM fact_sales;

-- FIND THE TOTAL NUMBER OF PRODUCT SOLD 
   SELECT 
     COUNT(product_name) AS product_sold 
   FROM dim_products ;

   SELECT COUNT(DISTINCT product_name) FROM dim_products;

-- FIND THE TOTAL NUMBER OF CUSTOMERS 
   SELECT COUNT(DISTINCT customer_id) AS total_customer FROM dim_customers;

-- FIND THE TOTAL NUMBER OF CUSTOMERS THAT HAS PLACED AN ORDER?
   SELECT COUNT(DISTINCT order_number) order_placed_customer FROM fact_sales
   WHERE order_date IS NOT NULL;

   SELECT COUNT(DISTINCT customer_key) FROM fact_sales;

-- GENERATE A REPORTS THAT SHOW ALL KKYS METRICS OF THE BUSINESS
    SELECT 'Total sales' AS measure_name , SUM(sales_amount) measure_value FROM fact_sales 
	UNION ALL 
    SELECT 'Total Quantity', SUM(quantity) AS total_item_sold FROM fact_sales 
	UNION ALL
	SELECT 'Total Orders' , COUNT(DISTINCT order_number) AS total_orders  FROM fact_sales
	UNION ALL
	SELECT 'Average Price' , AVG(price) AS average_price FROM fact_sales
	UNION ALL 
	SELECT 'Total Product Sold' ,COUNT(product_name) AS product_sold FROM dim_products
	UNION ALL 
	SELECT 'Total Customers',COUNT(DISTINCT customer_id) AS total_customer FROM dim_customers
	UNION ALL
	SELECT 'Order Placed Customers',COUNT(DISTINCT customer_key) FROM fact_sales

-- MAGNITUDE ANALYSIS 
-- COMPARE THE MEASURE VALUE BY CATEGORIES
-- 1. FIND TOTAL CUSTOMERS BY COUNTRIES
   SELECT country ,COUNT(customer_id) AS total_customers FROM dim_customers GROUP BY country ORDER BY total_customers DESC;

-- 2. FIND TOTAL CUSTOMERS BY GENDER 
  SELECT 
		gender , 
		COUNT(customer_id)  AS total_customers 
  FROM dim_customers 
  GROUP BY gender 
  ORDER BY total_customers DESC;

-- 3. FIND THE TOTAL PRODUCT BY CATEGORY 
  SELECT 
	  category ,
	  COUNT(product_id) AS total_products
  FROM dim_products 
  GROUP BY category 
  ORDER BY total_products DESC;

-- 4. WHAT IS THE AVERAGE COST IN EACH CATEGORY 
  SELECT 
		category ,
		AVG(cost) AS average_cost 
  FROM dim_products
  GROUP BY category 
  ORDER BY average_cost DESC;

-- 5. WHAT IS THE TOTAL REVENUE GENERATED BY EACH CATEGORY 
  SELECT
		P.category,
		SUM(S.sales_amount) AS total_revenue
  FROM dim_products P 
  JOIN fact_sales S 
  ON P.product_key = S.product_key
  GROUP BY P.category
  ORDER BY total_revenue DESC;

-- 6. FIND THE TOTAL REVENUE GENERATED BY EACH CUSTOMERS 
   SELECT 
        C.customer_key,
        CONCAT_WS(' ',C.first_name,C.last_name) AS full_name ,
		SUM(sales_amount) AS total_revenue 
   FROM dim_customers C
   JOIN fact_sales S 
   ON C.customer_key = S.customer_key
   GROUP BY CONCAT_WS(' ',C.first_name,C.last_name),C.customer_key
   ORDER BY total_revenue DESC;
  
-- 7. WHAT IS THE DISTRIBUTION OF THE SOLD ITEM ACROSS THE COUNTRY 
   SELECT 
		C.country,
		SUM(quantity) AS total_item_sold 
   FROM dim_customers C 
   JOIN fact_sales S 
   ON C.customer_key = S.customer_key 
--   WHERE S.order_date IS NOT NULL 
   GROUP BY C.country 
   ORDER BY total_item_sold DESC;
   

-- RANKING TOP N - TOP BOTTOM 
-- TOP N PERFORMERS | BOTTOM PERFORMERS 
-- 1. WHICH FIVE (5) PRODUCT GENERATE A HIGH REVENUE 
   SELECT TOP 5 P.product_name , SUM(S.sales_amount) AS total_revenue FROM dim_products P
   JOIN fact_sales S 
   ON P.product_key = S.product_key
   GROUP BY product_name
   ORDER BY total_revenue DESC;

   -- USING WINDOW FUNCTION
   SELECT * FROM (
	   SELECT P.product_name , 
	   SUM(S.sales_amount) AS total_revenue ,
	   ROW_NUMBER() OVER( ORDER BY SUM(S.sales_amount) DESC ) AS product_rank 
	   FROM dim_products P
	   JOIN fact_sales S 
	   ON P.product_key = S.product_key
	   GROUP BY P.product_name) r
	   WHERE product_rank <= 5
	  

-- 2. WHAT ARE THE FIVE WORST PERFORMING PRODUCTS IN TERM OF SALES 
    SELECT TOP 5 P.product_name , SUM(S.sales_amount) AS total_revenue FROM dim_products P
   JOIN fact_sales S 
   ON P.product_key = S.product_key
   GROUP BY product_name
   ORDER BY total_revenue ;

 SELECT * FROM (
	   SELECT P.product_name , 
	   SUM(S.sales_amount) AS total_revenue ,
	   ROW_NUMBER() OVER( ORDER BY SUM(S.sales_amount)) AS product_rank 
	   FROM dim_products P
	   JOIN fact_sales S 
	   ON P.product_key = S.product_key
	   GROUP BY P.product_name) r
	   WHERE product_rank <= 5

-- 3. FIND THE TOP 10 CUSTOMERS WHO HAVE GENERATED THE HIGHEST REVENUE
      SELECT * FROM (
		  SELECT 
		  CONCAT_WS(' ',C.first_name,C.last_name) full_name,
		  SUM(sales_amount) AS total_revenue ,
		  ROW_NUMBER() OVER(ORDER BY SUM(sales_amount) DESC ) AS customer_rank
		  FROM dim_customers C
		  JOIN fact_sales S 
		  ON C.customer_key = S.customer_key
		  GROUP BY CONCAT_WS(' ',C.first_name,C.last_name)
		  ) A
		  WHERE customer_rank <=5;

          
		   SELECT TOP 10
		  CONCAT_WS(' ',C.first_name,C.last_name) full_name,
		  SUM(sales_amount) AS total_revenue ,
		  ROW_NUMBER() OVER(ORDER BY SUM(sales_amount) DESC ) AS customer_rank
		  FROM dim_customers C
		  JOIN fact_sales S 
		  ON C.customer_key = S.customer_key
		  GROUP BY CONCAT_WS(' ',C.first_name,C.last_name)


		   